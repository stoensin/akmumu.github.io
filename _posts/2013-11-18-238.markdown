---
author: admin
comments: true
date: 2013-11-18 03:24:51+00:00
layout: post
slug: js%e7%9a%84%e4%b8%80%e5%85%83%e5%8a%a0%e6%b3%95%e5%92%8c%e4%b8%80%e5%85%83%e5%87%8f%e6%b3%95
title: js的一元加法和一元减法
permalink: /2013/11/18/238.html
wordpress_id: 238
categories:
- JS
---

## 一元加法和一元减法


大多数人都熟悉一元加法和一元减法，它们在 ECMAScript 中的用法与您高中数学中学到的用法相同。

一元加法本质上对数字无任何影响：

    
    var iNum = 20;
    iNum = +iNum;
    alert(iNum);	//输出 "20"


这段代码对数字 20 应用了一元加法，返回的还是 20。

尽管一元加法对数字无作用，但对字符串却有有趣的效果，会把字符串转换成数字。

    
    var sNum = "20";
    alert(typeof sNum);	//输出 "string"
    var iNum = +sNum;
    alert(typeof iNum);	//输出 "number"


这段代码把字符串 "20" 转换成真正的数字。当一元加法运算符对字符串进行操作时，它计算字符串的方式与 parseInt() 相似，主要的不同是只有对以 "0x" 开头的字符串（表示十六进制数字），一元运算符才能把它转换成十进制的值。因此，用一元加法转换 "010"，得到的总是 10，而 "0xB" 将被转换成 11。

另一方面，一元减法就是对数值求负（例如把 20 转换成 -20）：

    
    var iNum = 20;
    iNum = -iNum;
    alert(iNum);	//输出 "-20"


与一元加法运算符相似，一元减法运算符也会把字符串转换成近似的数字，此外还会对该值求负。例如：

    
    var sNum = "20";
    alert(typeof sNum);	//输出 "string"
    var iNum = -sNum;
    alert(iNum);		//输出 "-20"
    alert(typeof iNum);	//输出 "number"


在上面的代码中，一元减法运算符将把字符串 "-20" 转换成 -20（一元减法运算符对十六进制和十进制的处理方式与一元加法运算符相似，只是它还会对该值求负）。
