---
author: admin
comments: true
date: 2012-07-31 03:22:00+00:00
layout: post
slug: mysql%e5%91%bd%e4%bb%a4-show-global-status%e5%91%bd%e4%bb%a4%e5%be%97%e5%88%b0%e7%9a%84%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3%ef%bc%88mysql%e9%94%99%e8%af%af%ef%bc%89
title: MYSQL命令 Show global status命令得到的参数详解（MYSQL错误）
permalink: /2012/07/31/43.html
wordpress_id: 43
categories:
- MYSQL
tags:
- Mysql
---




## Show global status




在Show global status输出中的项。 5.1手册中没有的或者翻译有问题的，都附带5.5原文说明：




### Aborted_clients




由于客户端没有正确关闭连接导致客户端终止而中断的连接数。




### Aborted_connects




试图连接到MySQL服务器而失败的连接数。




### Binlog_cache_disk_use




使用临时二进制日志缓存但超过binlog_cache_size值并使用临时文件来保存事务中的语句的事务数量。




### Binlog_cache_use




使用临时二进制日志缓存的事务数量。




### Binlog_stmt_cache_disk_use




The number of nontransaction statements that used the binary log statement cache but that exceeded the value of binlog_stmt_cache_size and used a temporary file to store those statements.




当非事务语句使用二进制日志缓存，但是超出binlog_stmt_cache_size时，使用一个临时文件来存放这些语句。




### Binlog_stmt_cache_use




The number of nontransactional statements that used the binary log statement cache.




使用二进制日志缓存文件的非事务语句数量。




### Bytes_received




从所有客户端接收到的字节数。




### Bytes_sent




发送给所有客户端的字节数。




### Com_admin_commands [ Com_xxx ]




Com_xxx 语句计数变量表示每个xxx 语句执行的次数。每类语句有一个状态变量。例如，Com_delete和Com_insert分别统计DELETE 和INSERT语句执行的次数。




Com_xxx包括：




**Com_alter_db**




**Com_alter_db_upgrade**




**Com_alter_event**




**Com_alter_function**




**Com_alter_procedure**




**Com_alter_server**




**Com_alter_table**




**Com_alter_tablespace**




**Com_analyze**




**Com_assign_to_keycache**




**Com_begin**




**Com_binlog**




**Com_call_procedure**




**Com_change_db**




**Com_change_master**




**Com_check**




**Com_checksum**




**Com_commit**




**Com_create_db**




**Com_create_event**




**Com_create_function**




**Com_create_index**




**Com_create_procedure**




**Com_create_server**




**Com_create_table**




**Com_create_trigger**




**Com_create_udf**




**Com_create_user**




**Com_create_view**




**Com_dealloc_sql**




**Com_delete**




**Com_delete_multi**




**Com_do**




**Com_drop_db**




**Com_drop_event**




**Com_drop_function**




**Com_drop_index**




**Com_drop_procedure**




**Com_drop_server**




**Com_drop_table**




**Com_drop_trigger**




**Com_drop_user**




**Com_drop_view**




**Com_empty_query**




**Com_execute_sql**




**Com_flush**




**Com_grant**




**Com_ha_close**




**Com_ha_open**




**Com_ha_read**




**Com_help**




**Com_insert**




**Com_insert_select**




**Com_install_plugin**




**Com_kill**




**Com_load**




**Com_lock_tables**




**Com_optimize**




**Com_preload_keys**




**Com_prepare_sql**




**Com_purge**




**Com_purge_before_date**




**Com_release_savepoint**




**Com_rename_table**




**Com_rename_user**




**Com_repair**




**Com_replace**




**Com_replace_select**




**Com_reset**




**Com_resignal**




**Com_revoke**




**Com_revoke_all**




**Com_rollback**




**Com_rollback_to_savepoint**




**Com_savepoint**




**Com_select**




**Com_set_option**




**Com_show_authors**




**Com_show_binlog_events**




**Com_show_binlogs**




**Com_show_charsets**




**Com_show_collations**




**Com_show_contributors**




**Com_show_create_db**




**Com_show_create_event**




**Com_show_create_func**




**Com_show_create_proc**




**Com_show_create_table**




**Com_show_create_trigger**




**Com_show_databases**




**Com_show_engine_logs**




**Com_show_engine_mutex**




**Com_show_engine_status**




**Com_show_errors**




**Com_show_events**




**Com_show_fields**




**Com_show_function_code**




**Com_show_function_status**




**Com_show_grants**




**Com_show_keys**




**Com_show_logs**




**Com_show_master_status**




**Com_show_new_master**




**Com_show_open_tables**




**Com_show_plugins**




**Com_show_privileges**




**Com_show_procedure_code**




**Com_show_procedure_status**




**Com_show_processlist**




**Com_show_profile**




**Com_show_profiles**




**Com_show_relaylog_events**




**Com_show_slave_hosts**




**Com_show_slave_status**




**Com_show_status**




**Com_show_storage_engines**




**Com_show_table_status**




**Com_show_tables**




**Com_show_triggers**




**Com_show_variables**




**Com_show_warnings**




**Com_signal**




**Com_slave_start**




**Com_slave_stop**




**Com_stmt_close**




**Com_stmt_execute**




**Com_stmt_fetch**




**Com_stmt_prepare**




**Com_stmt_reprepare**




**Com_stmt_reset**




**Com_stmt_send_long_data**




**Com_truncate**




**Com_uninstall_plugin**




**Com_unlock_tables**




**Com_update**




**Com_update_multi**




**Com_xa_commit**




**Com_xa_end**




**Com_xa_prepare**




**Com_xa_recover**




**Com_xa_rollback**




**Com_xa_start**




### Compression




客户端是否使用了压缩的连接协议。




### Connections




试图连接到(不管是否成功)MySQL服务器的连接数。




### Created_tmp_disk_tables




服务器执行语句时在硬盘上自动创建的临时表的数量。




### Created_tmp_files




**mysqld**已经创建的临时文件的数量。




### Created_tmp_tables




服务器执行语句时自动创建的内存中的临时表的数量。如果Created_tmp_disk_tables较大，你可能要增加tmp_table_size值使临时表基于内存而不基于硬盘。




### Delayed_errors




用INSERT DELAYED写的出现错误的行数(可能为duplicate key)。




### Delayed_insert_threads




使用的INSERT DELAYED处理器线程数。




### Delayed_writes




写入的INSERT DELAYED行数。




### Flush_commands




执行的FLUSH语句数。




### Handler_commit




内部提交语句数。




### Handler_delete




行从表中删除的次数。




### Handler_discover




MySQL服务器可以问NDB CLUSTER存储引擎是否知道某一名字的表。这被称作发现。Handler_discover说明通过该方法发现的次数。




### Handler_prepare




准备阶段的两阶段提交操作计数器。




### Handler_read_first




The number of times the first entry in an index was read. If this value is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.




索引中第一条被读的次数。如果较高，它表明服务器正执行大量全索引扫描；例如，SELECT col1 FROM foo，假定col1有索引。




### Handler_read_key




根据键读一行的请求数。如果较高，说明查询和表的索引正确。




### Handler_read_last




The number of requests to read the last key in an index. With ORDER BY, the server will issue a first-key request followed by several next-key requests, whereas with With ORDER BY DESC, the server will issue a last-key request followed by several
 previous-key requests. This variable was added in MySQL 5.5.7.




查询读最后一个索引的请求数。当使用ORDER BY时，服务器优先发出使用第一个索引的请求，之后是使用其他索引。当使用ORDER BY DESC时，服务器优先发出使用最后一个索引的请求， 之后是前几个索引的请求。




### Handler_read_next




按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。




### Handler_read_prev




按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC




### Handler_read_rnd




根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。




### Handler_read_rnd_next




在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。




### Handler_rollback




内部ROLLBACK语句的数量。




### Handler_savepoint




The number of requests for a storage engine to place a savepoint.




存储引擎放置一个保存点的请求数。




### Handler_savepoint_rollback




The number of requests for a storage engine to roll back to a savepoint.




存储引擎回滚到一个保存点的请求。




### Handler_update




在表内更新一行的请求数




### Handler_write




在表内插入一行的请求数。




### Innodb_buffer_pool_pages_data




包含数据的页数(脏或干净)。




### Innodb_buffer_pool_pages_dirty




当前的脏页数。




### Innodb_buffer_pool_pages_flushed




要求清空的缓冲池页数。




### Innodb_buffer_pool_pages_free




空页数。




### Innodb_buffer_pool_pages_latched




在InnoDB缓冲池中锁定的页数。这是当前正读或写或由于其它原因不能清空或删除的页数。




### Innodb_buffer_pool_pages_misc




忙的页数，因为它们已经被分配优先用作管理，例如行锁定或适用的哈希索引。该值还可以计算为Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data。




### Innodb_buffer_pool_pages_total




缓冲池总大小（页数）。




### Innodb_buffer_pool_read_ahead




The number of pages read into the InnoDB buffer pool by the read-ahead background thread.




后台预读线程读取到Innodb缓冲池的页的数量。




### Innodb_buffer_pool_read_ahead_evicted




The number of pages read into the InnoDB buffer pool by the read-ahead background thread that were subsequently evicted without having been accessed by queries.




后台预读线程读取到Innodb缓冲池的页由于未被查询使用而驱逐的数量。




### Innodb_buffer_pool_read_requests




InnoDB已经完成的逻辑读请求数。




### Innodb_buffer_pool_reads




不能满足InnoDB必须单页读取的缓冲池中的逻辑读数量。




### Innodb_buffer_pool_wait_free




一般情况，通过后台向InnoDB缓冲池写。但是，如果需要读或创建页，并且没有干净的页可用，则它还需要先等待页面清空。该计数器对等待实例进行记数。如果已经适当设置缓冲池大小，该值应小。




### Innodb_buffer_pool_write_requests




向InnoDB缓冲池的写数量。




### Innodb_data_fsyncs




fsync()操作数。




### Innodb_data_pending_fsyncs




当前挂起的fsync()操作数。




### Innodb_data_pending_reads




当前挂起的读数。




### Innodb_data_pending_writes




当前挂起的写数。




### Innodb_data_read




至此已经读取的数据数量（字节）




### Innodb_data_reads




数据读总数量。




### Innodb_data_writes




数据写总数量。




### Innodb_data_written




至此已经写入的数据量（字节）。




### Innodb_dblwr_pages_written




The number of pages that have been written for doublewrite operations.




双写操作执行的页的数量。




### Innodb_dblwr_writes




The number of doublewrite operations that have been performed.




已经执行的双写操作的数量。




### Innodb_have_atomic_builtins




Indicates whether the server was built with atomic instructions.




指示服务器是否建立原子操作指令。




### Innodb_log_waits




我们必须等待的时间，因为日志缓冲区太小，我们在继续前必须先等待对它清空。




### Innodb_log_write_requests




日志写请求数。




### Innodb_log_writes




向日志文件的物理写数量。




### Innodb_os_log_fsyncs




向日志文件完成的fsync()写数量




### Innodb_os_log_pending_fsyncs




挂起的日志文件fsync()操作数量。




### Innodb_os_log_pending_writes




挂起的日志文件写操作。




### Innodb_os_log_written




写入日志文件的字节数。




### Innodb_page_size




编译的InnoDB页大小(默认16KB)。许多值用页来记数；页的大小很容易转换为字节。




### Innodb_pages_created




创建的页数。




### Innodb_pages_read




读取的页数。




### Innodb_pages_written




写入的页数。




### Innodb_row_lock_current_waits




当前等待的待锁定的行数。




### Innodb_row_lock_time




行锁定花费的总时间，单位毫秒。




### Innodb_row_lock_time_avg




行锁定的平均时间，单位毫秒。




### Innodb_row_lock_time_max




行锁定的最长时间，单位毫秒。




### Innodb_row_lock_waits




一行锁定必须等待的时间数。




### Innodb_rows_deleted




从InnoDB表删除的行数。




### Innodb_rows_inserted




插入到InnoDB表的行数。




### Innodb_rows_read




从InnoDB表读取的行数。




### Innodb_rows_updated




InnoDB表内更新的行数。




### Innodb_truncated_status_writes




The number of times output from the SHOW ENGINE INNODB STATUS is truncated. Monitoring applications that parse the output from this command can test this value before and after issuing the SHOW ENGINE command, to confirm if the output is complete
 or not.




SHOW ENGINE INNODB STATUS 的输出时间将被截断。监控程序解析这个输出，可以测试这项之前和之后的值，以确认输出是否完整。




### Key_blocks_not_flushed




键缓存内已经更改但还没有清空到硬盘上的键的数据块数量。




### Key_blocks_unused




键缓存内未使用的块数量。你可以使用该值来确定使用了多少键缓存；




### Key_blocks_used




键缓存内使用的块数量。该值为高水平线标记，说明已经同时最多使用了多少块。




### Key_read_requests




从缓存读键的数据块的请求数。




### Key_reads




从硬盘读取键的数据块的次数。如果Key_reads较大，则Key_buffer_size值可能太小。可以用Key_reads/Key_read_requests计算缓存损失率。




### Key_write_requests




将键的数据块写入缓存的请求数。




### Key_writes




向硬盘写入将键的数据块的物理写操作的次数。




### Last_query_cost




用查询优化器计算的最后编译的查询的总成本。用于对比同一查询的不同查询方案的成本。默认值0表示还没有编译查询。默认值是0。Last_query_cost具有会话范围。




### Max_used_connections




服务器启动后已经同时使用的连接的最大数量。




### MySQL Cluster Status Variables




**Ndb_api_bytes_received_count**




**Ndb_api_bytes_received_count_session**




**Ndb_api_bytes_received_count_slave**




**Ndb_api_bytes_sent_count**




**Ndb_api_bytes_sent_count_session**




**Ndb_api_bytes_sent_count_slave**




**Ndb_api_event_bytes_count**




**Ndb_api_event_bytes_count_injector**




**Ndb_api_event_data_count**




**Ndb_api_event_data_count_injector**




**Ndb_api_event_nondata_count**




**Ndb_api_event_nondata_count_injector**




**Ndb_api_pk_op_count**




**Ndb_api_pk_op_count_session**




**Ndb_api_pk_op_count_slave**




**Ndb_api_pruned_scan_count**




**Ndb_api_pruned_scan_count_session**




**Ndb_api_pruned_scan_count_slave**




**Ndb_api_range_scan_count**




**Ndb_api_range_scan_count_session**




**Ndb_api_range_scan_count_slave**




**Ndb_api_read_row_count**




**Ndb_api_read_row_count_session**




**Ndb_api_read_row_count_slave**




**Ndb_api_scan_batch_count**




**Ndb_api_scan_batch_count_session**




**Ndb_api_scan_batch_count_slave**




**Ndb_api_table_scan_count**




**Ndb_api_table_scan_count_session**




**Ndb_api_table_scan_count_slave**




**Ndb_api_trans_abort_count**




**Ndb_api_trans_abort_count_session**




**Ndb_api_trans_abort_count_slave**




**Ndb_api_trans_close_count**




**Ndb_api_trans_close_count_session**




**Ndb_api_trans_close_count_slave**




**Ndb_api_trans_commit_count**




**Ndb_api_trans_commit_count_session**




**Ndb_api_trans_commit_count_slave**




**Ndb_api_trans_local_read_row_count**




**Ndb_api_trans_local_read_row_count_session**




**Ndb_api_trans_local_read_row_count_slave**




**Ndb_api_trans_start_count**




**Ndb_api_trans_start_count_session**




**Ndb_api_trans_start_count_slave**




**Ndb_api_uk_op_count**




**Ndb_api_uk_op_count_session**




**Ndb_api_uk_op_count_slave**




**Ndb_api_wait_exec_complete_count**




**Ndb_api_wait_exec_complete_count_session**




**Ndb_api_wait_exec_complete_count_slave**




**Ndb_api_wait_meta_request_count**




**Ndb_api_wait_meta_request_count_session**




**Ndb_api_wait_meta_request_count_slave**




**Ndb_api_wait_nanos_count**




**Ndb_api_wait_nanos_count_session**




**Ndb_api_wait_nanos_count_slave**




**Ndb_api_wait_scan_result_count**




**Ndb_api_wait_scan_result_count_session**




**Ndb_api_wait_scan_result_count_slave**




**ndb_cluster_connection_pool**




**Ndb_cluster_node_id**




**Ndb_config_from_host**




**Ndb_conflict_fn_epoch**




**Ndb_conflict_fn_epoch_trans**




**Ndb_conflict_fn_max**




**Ndb_conflict_fn_old**




**Ndb_conflict_trans_conflict_commit_count**




**Ndb_conflict_trans_detect_iter_count**




**Ndb_conflict_trans_reject_count**




**Ndb_conflict_trans_row_conflict_count**




**Ndb_conflict_trans_row_reject_count**




**ndb_execute_count**




**ndb-nodeid**




**Ndb_number_of_data_nodes**




**ndb_pruned_scan_count**




**Ndb_pushed_queries_defined**




**Ndb_pushed_queries_dropped**




**Ndb_pushed_queries_executed**




**ndb_pushed_reads**




**ndb_scan_count**




### Not_flushed_delayed_rows




等待写入INSERT DELAY队列的行数。




### Open_files




打开的文件的数目。




### Open_streams




打开的流的数量(主要用于记录)。




### Open_table_definitions




The number of cached .frm files.




被缓存的.FRM文件数量




### Open_tables




当前打开的表的数量。




### Opened_files




已经打开的表的数量。如果Opened_tables较大，table_cache 值可能太小。




### Opened_table_definitions




The number of .frm files that have been cached.




被缓存过的.FRM文件的数量。




### Opened_tables




已经打开的表的数量。如果Opened_tables较大，table_cache 值可能太小。




### Performance Schema Status Variables




The Performance Schema implements several status variables that provide information about instrumentation that could not be loaded or created due to memory constraints:




性能架构提供了几个变量，有关仪器仪表的信息由于内存限制无法被加载或创建：




**Performance_schema_cond_classes_lost**




**Performance_schema_cond_instances_lost**




**Performance_schema_file_classes_lost**




**Performance_schema_file_handles_lost**




**Performance_schema_file_instances_lost**




**Performance_schema_locker_lost**




**Performance_schema_mutex_classes_lost**




**Performance_schema_mutex_instances_lost**




**Performance_schema_rwlock_classes_lost**




**Performance_schema_rwlock_instances_lost**




**Performance_schema_table_handles_lost**




**Performance_schema_table_instances_lost**




**Performance_schema_thread_classes_lost**




**Performance_schema_thread_instances_lost**




### Prepared_stmt_count




The current number of prepared statements. (The maximum number of statements is given by the max_prepared_stmt_count system variable.)




预处理语句的数量。（语句的最大数量值是由系统变量max_prepared_stmt_count决定的。）




### Qcache_free_blocks




查询缓存内自由内存块的数量。




### Qcache_free_memory




用于查询缓存的自由内存的数量。




### Qcache_hits




查询缓存被访问的次数。




### Qcache_inserts




加入到缓存的查询数量。




### Qcache_lowmem_prunes




由于内存较少从缓存删除的查询数量。




### Qcache_not_cached




非缓存查询数(不可缓存，或由于query_cache_type设定值未缓存)。




### Qcache_queries_in_cache




登记到缓存内的查询的数量。




### Qcache_total_blocks




查询缓存内的总块数。




### Queries




### Questions




已经发送给服务器的查询的个数。




### RPL_semi_sync_xxx




以下变量只有当Master安装了半同步复制插件时可用。




**Rpl_semi_sync_master_clients**




The number of semisynchronous slaves.




半同步复制的Slave数量。




**Rpl_semi_sync_master_net_avg_wait_time**




The average time in microseconds the master waited for a slave reply.




主等待从机响应的平均时间，以微秒为单位。




**Rpl_semi_sync_master_net_wait_time**




The total time in microseconds the master waited for slave replies.




主等待从机响应的总时间。




**Rpl_semi_sync_master_net_waits**




The total number of times the master waited for slave replies.




主等待从机响应的总次数。




**Rpl_semi_sync_master_no_times**




The number of times the master turned off semisynchronous replication.




主机关闭半同步复制的次数




**Rpl_semi_sync_master_no_tx**




The number of commits that were not acknowledged successfully by a slave.




Slave端未确认成功的提交数。




**Rpl_semi_sync_master_status**




Whether semisynchronous replication currently is operational on the master. The value is ON if the plugin has been enabled and a commit acknowledgment has occurred. It is OFF if the plugin is not enabled or the master has fallen back to asynchronous
 replication due to commit acknowledgment timeout.




无论半同步复制目前是否在主上运行。如果插件已经启用并且提交已经确认，则值为ON；如果插件没有启用或者主机由于提交超时回落到异步同步时，值为OFF。




**Rpl_semi_sync_master_timefunc_failures**




The number of times the master failed when calling time functions such as gettimeofday().




主机调用类似gettimeofday()的时间函数失败的次数。




**Rpl_semi_sync_master_tx_avg_wait_time**




The average time in microseconds the master waited for each transaction.




主机等待每个事务的平均时间。




**Rpl_semi_sync_master_tx_wait_time**




The total time in microseconds the master waited for transactions.




主机等待事务的总时间。




**Rpl_semi_sync_master_tx_waits**




The total number of times the master waited for transactions.




主机等待事务的总次数。




**Rpl_semi_sync_master_wait_pos_backtraverse**




The total number of times the master waited for an event with binary coordinates lower than events waited for previously. This can occur when the order in which transactions start waiting for a reply is different from the order in which their
 binary log events are written.




主机等待一个二进制坐标的时间低于先前事务的等待时间的总次数。当事务开始等待答复的顺序不同于事务写入全日志的顺序时，可能发生这种情况。




**Rpl_semi_sync_master_wait_sessions**




The number of sessions currently waiting for slave replies.




会话通常等待Slave答复的次数。




**Rpl_semi_sync_master_yes_tx**




The number of commits that were acknowledged successfully by a slave.




提交被Slave确认成功的次数。




**Rpl_semi_sync_slave_status**




Whether semisynchronous replication currently is operational on the slave. This is ON if the plugin has been enabled and the slave I/O thread is running, OFF otherwise.




无论半同步复制是否在Slave端运行。如果插件被启用并且Slave I/O线程正在运行，则显示ON，否则显示OFF。




**Rpl_status**




The status of fail-safe replication (not implemented). This variable is unused and is removed in MySQL 5.6.




不安全而失败复制的状态（不执行）。这个变量没有启用且在MySQL 5.6版本中移除。




### Select_full_join




没有使用索引的联接的数量。如果该值不为0,你应仔细检查表的索引。




### Select_full_range_join




在引用的表中使用范围搜索的联接的数量。




### Select_range




在第一个表中使用范围的联接的数量。一般情况不是关键问题，即使该值相当大。




### Select_range_check




在每一行数据后对键值进行检查的不带键值的联接的数量。如果不为0，你应仔细检查表的索引。




### Select_scan




对第一个表进行完全扫描的联接的数量。




### Slave_heartbeat_period




Shows the replication heartbeat interval (in seconds) on a replication slave.




显示一个Slave的复制心跳间隔。




### Slave_open_temp_tables




当前由从SQL线程打开的临时表的数量。




### Slave_received_heartbeats




This counter increments with each replication heartbeat received by a replication slave since the last time that the slave was restarted or reset, or a CHANGE MASTER TO statement was issued.




累计每个SLAVE从最后一次启动、复位或更换master到现在收到的心跳数。




### Slave_retried_transactions




The total number of times since startup that the replication slave SQL thread has retried transactions.




从启动以来SLAVE端尝试事务的总次数。




### Slave_running




如果该服务器是连接到主服务器的从服务器，则该值为ON。




### Slow_launch_threads




创建时间超过slow_launch_time秒的线程数。




### Slow_queries




查询时间超过long_query_time秒的查询的个数




### Sort_merge_passes




排序算法已经执行的合并的数量。如果这个变量值较大，应考虑增加sort_buffer_size系统变量的值。




### Sort_range




在范围内执行的排序的数量。




### Sort_rows




已经排序的行数。




### Sort_scan




通过扫描表完成的排序的数量。




### Ssl_xxx




用于SSL连接的变量。包括：




**Ssl_accept_renegotiates**




**Ssl_accepts**




**Ssl_callback_cache_hits**




**Ssl_cipher**




**Ssl_cipher_list**




**Ssl_client_connects**




**Ssl_connect_renegotiates**




**Ssl_ctx_verify_depth**




**Ssl_ctx_verify_mode**




**Ssl_default_timeout**




**Ssl_finished_accepts**




**Ssl_finished_connects**




**Ssl_session_cache_hits**




**Ssl_session_cache_misses**




**Ssl_session_cache_mode**




**Ssl_session_cache_overflows**




**Ssl_session_cache_size**




**Ssl_session_cache_timeouts**




**Ssl_sessions_reused**




**Ssl_used_session_cache_entries**




**Ssl_verify_depth**




**Ssl_verify_mode**




**Ssl_version**




### Table_locks_immediate




立即获得的表的锁的次数。




### Table_locks_waited




不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制




### Tc_log_max_pages_used




### Tc_log_page_size




### Tc_log_page_waits




### Threads_cached




线程缓存内的线程的数量。




### Threads_connected




当前打开的连接的数量。




### Threads_created




创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。缓存访问率的计算方法Threads_created/Connections。




### Threads_running




激活的（非睡眠状态）线程数。




### Uptime




服务器已经运行的时间（以秒为单位）。




### Uptime_since_flush_status




The number of seconds since the most recent FLUSH STATUS statement.




从上次执行FLUSH STATUS语句后经过的时间。



