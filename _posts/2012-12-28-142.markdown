---
author: admin
comments: true
date: 2012-12-28 05:50:00+00:00
layout: post
slug: '%e5%88%a9%e7%94%a8xdebug%e5%88%86%e6%9e%90php%e7%a8%8b%e5%ba%8f%ef%bc%8c%e6%89%be%e5%87%ba%e6%80%a7%e8%83%bd%e7%93%b6%e9%a2%88'
title: 利用Xdebug分析PHP程序，找出性能瓶颈
permalink: /2012/12/28/142.html
wordpress_id: 142
categories:
- PHP
tags:
- php程序设计
---



[文章作者：张宴 本文版本：v1.0 最后修改：2007.06.28 转载请注明出处：[http://blog.s135.com](http://blog.s135.com/)]  

  

　　经济学中有一条著名的80-20定律，引用到编程中，就是：80%的性能瓶颈是由20%的代码引起的。借助PHP的XDebug扩展，可以有效地找出这20%的代码。  

  

　　一、安装配置  

　　1、下载PHP的XDebug扩展，网址：[http://xdebug.org/](http://xdebug.org/)  

  

　　2、在Linux下编译安装XDebug引用tar -xzf xdebug-2.0.0RC3.gz  

cd xdebug-2.0.0RC3  

/usr/local/php/bin/phpize  

./configure --enable-xdebug  

cp modules/xdebug.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20020429/  

　　注：/usr/local/php/lib/php/extensions/no-debug-non-zts-20020429/不同的PHP版本路径不同，也不一定要放在该路径，可以在zend_extension_ts中自行指定xdebug.so所在位置。  

  

引用vi /usr/local/php/lib/php.ini  

　　修改php.ini，去除PHP加速模块，增加以下配置信息支持XDebug扩展  

[view plain](http://blog.s135.com/#)[print](http://blog.s135.com/#)[?](http://blog.s135.com/#)




  1. [Xdebug] 
  2. zend_extension_ts="/usr/local/php/lib/php/extensions/no-debug-non-zts-20020429/xdebug.so"

  3. xdebug.profiler_enable=on 
  4. xdebug.trace_output_dir="/tmp/xdebug"
  5. xdebug.profiler_output_dir="/tmp/xdebug"
  6. xdebug.profiler_output_name="script"

  

引用mkdir -p /tmp/xdebug  

chmod 755 /tmp/xdebug  

chown www:www /tmp/xdebug  

/usr/local/apache/bin/apachectl -k restart  

  

　　3、客户端（Windows）：WinCacheGrind  

　　下载地址：[http://sourceforge.net/projects/wincachegrind/](http://sourceforge.net/projects/wincachegrind/)  

  

　　二、分析过程  

　　1、访问你的网站，将首页上各种链接点击几遍，XDebug在/tmp/xdebug目录生成以下文件：  

　　usr_local_apache_htdocs_app_checknum_chknum_php_cachegrind.out  

　　usr_local_apache_htdocs_app_login_showHeaderLogin_php_cachegrind.out  

　　usr_local_apache_htdocs_app_play_play_php_cachegrind.out  

　　usr_local_apache_htdocs_app_user_member_php_cachegrind.out  

　　usr_local_apache_htdocs_tag_tags_php_cachegrind.out  

　　usr_local_apache_htdocs_top_top_php_cachegrind.out  

  

　　2、将以上文件拷贝到Windows上，用客户端软件WinCacheGrind打开每个文件，发现以下PHP程序执行所耗费的时间最长：  

　　/usr/local/apache/htdocs/tag/tags.php　　　　　　耗时840ms  

  

　　三、分析结果：  

　　1、/usr/local/apache/htdocs/tag/tags.php  

  

　　[![](http://akmumu-wordpress.stor.sinaapp.com/wp-content/uploads/pic/other_site/blog_s135_xdebug1.gif)](http://akmumu-wordpress.stor.sinaapp.com/wp-content/uploads/pic/other_site/blog_s135_xdebug1.gif)  

  

　　(1)耗时最长的filter_tags函数出现在/usr/local/apache/htdocs/tag/tags.php的第158行：  

　　$tags .= filter_tags($videos[$i]['tags'])." ";  

  

　　(2)filter_tags函数引自/usr/local/apache/htdocs/include/misc.php，getForbiddenTags函数被filter_tags函数调用了21次，filter_tags函数耗费的时间中绝大多数因getForbiddenTags函数所致。getForbiddenTags函数的内容如下：  

[view plain](http://blog.s135.com/#)[print](http://blog.s135.com/#)[?](http://blog.s135.com/#)




  1. function getForbiddenTags() 
  2. { 
  3.   4. $tagsPath=TEMPLATE_FILE_PATH."tags/forbidden_tags.txt"; 
  5. if(file_exists($tagsPath)) 
  6. { 
  7. $fp = fopen($tagsPath, "r"); 
  8. $arrconf = array (); 
  9. if ($fp) 
  10. { 
  11. while (!feof($fp)) 
  12. { 
  13. $line = fgets($fp, 1024); 
  14. $line = trim($line); 
  15. $rows = explode("#", $line); 
  16. $coumns = explode("=", trim($rows[0])); 
  17. if(""!=trim($coumns[0])) 
  18. { 
  19. $arrconf[trim($coumns[0])] = trim($coumns[1]); 
  20. } 
  21. } 
  22. } 
  23. return $arrconf; 
  24. } 
  25. } 

  

　　(4)对getForbiddenTags函数进行分析，其中的PHP函数trim被调用了16827次。  

　　[![](http://akmumu-wordpress.stor.sinaapp.com/wp-content/uploads/pic/other_site/blog_s135_xdebug2.gif)](http://akmumu-wordpress.stor.sinaapp.com/wp-content/uploads/pic/other_site/blog_s135_xdebug2.gif)  

  

　　(5)可能造成瓶颈的原因：  

　　要过滤的156个关键字逐行存放在/usr/local/apache/template/tags/forbidden_tags.txt文件中，文本数据库的效率不高。  

　　逐行读取函数fgets、以及去除字符串两边的空白或者指定的字符的函数trim在高负载下的效率低，可以测试fopen、fread、fscanf之类的文件读取函数，对比一下。


